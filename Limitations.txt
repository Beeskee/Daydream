A programming language designed to be embedded in other programs only has access to the input/output facilities the host provides.

If a programming language design does not standardize input/output facilities (mine does not), only code that is limited to processing is portable across hosts.

Although that may seem like a serious problem, and it is, it is more widespread than you may think.

All modern, popular operating systems are implemented in C, so all programs are ultimately embedded in the inadequate C runtime system.  That causes problems with portability, calling and passing data across compilation boundaries, automatic resource management, transparent persistence, debugging, and security.  Lisp machines did not have many of these problems because they had a more powerful runtime system.  The problems C causes are less obvious because they are so ubiquitous.

It is possible to work around many of these problems with enough abstraction layers.  The unsolvable problems usually involve cooperation across compilation boundaries and are analogous to cooperation between computers.
