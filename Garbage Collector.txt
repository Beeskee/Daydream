Introduction

If the host programming language uses a tracing garbage collector, it will be reused.  This document describes the tracing garbage collector I would implement in a programming language without one.


The Solution Space

Interactive programs require low, constant, latency.  Garbage collectors with long or variable pauses are unacceptable.

All modern, popular operating systems are written in C and C++.  C and C++ use manual resource management and lack safe multithreading abstractions.  These and other flaws have had a harmful effect on operating system design.  An acceptable garbage collector design will avoid making these problems worse and provide workarounds where possible.

Moving corrupts C and C++ pointers.  Moving garbage collectors are unacceptable.

Most code is not thread-safe.  Multithreaded garbage collectors are unacceptable.


Internal Resource Management

Because of the limitations imposed by C and C++, only resources which are not observable by other processes can be managed automatically.  That is, effectively, memory.

Modules must be garbage collected.  Reloading a module may cause the previous instance to become unreachable.

This garbage collector is continuous, generational, and incremental (i.e. marking and sweeping are decomposed into multiple steps).

Continuous garbage collection improves latency and space efficiency at cost to throughput.

Generational garbage collection improves latency and throughput.

Incremental garbage collection improves latency at cost to throughput.

It is possible to stop and start garbage collection, perform increments only when the program is idle (by calling a "step" procedure after stopping garbage collection), set the number of increments (the "step multiplier") the garbage collector performs at each step, and force non-incremental full garbage collection.  These operations can be performed with both the external (host programming language) and internal (this programming language) garbage collector interfaces.  They allow you to control the trade-off between low-latency and high-throughput and control when pauses happen.

In all cases a non-incremental full garbage collection will occur if memory is almost exhausted because a pause is less disruptive than a crash.


External Resource Management

Because of the limitations imposed by C and C++, resources which are observable by other processes must be managed manually.  That includes files, graphical user interfaces, and network connections.

It may seem like the garbage collector could manage external resources automatically, but that would not work reliably and would hide defects.  Modern, popular operating systems assume resources are deallocated as soon as possible, often in a specific order.  Windows will cause an error if the same process tries to open the same file for exclusive access more than once without closing it in between, and most operating systems will cause an error if the same process tries to open the same port more than once without closing it in between.  An operating system designed with automatic resource management in mind would tolerate the same process allocating the same resource multiple times and only deallocate it when it had been deallocated by the process the same number of times (or when the process terminates).  Delaying deallocating an external resource could result in errors, so it is best if the garbage collector signals a defect condition when an external resource becomes unreachable without having been deallocated.  The garbage collector must deallocate the unreachable external resource before signaling the defect condition to prevent a resource leak.

External resources must be modeled as proxy objects associated with a procedure for allocating them and a procedure for deallocating them.

The proxy objects may contain additional logic.  For example, the proxy object associated with a graphical user interface must contain references to the event handlers of its controls.  Otherwise, those event handlers would be considered unreachable and be garbage collected, which would cause an error when the user attempted to use the controls.

Some external resources can be managed semi-automatically by a construct that allocates it, then runs a user-defined procedure with it as an argument, and then deallocates it.  Lisp-like languages often provide "with" constructs for this purpose.  That is sufficient for most file operations.

Other external resources must be managed manually by explicitly allocating and deallocating them.  That is necessary for most long-lived external resources.


Transparent Persistence

If the implementation is to support transparent persistence, external resources must also be associated with a procedure for recovering them and the hooks mentioned in the main design document should be implemented.

When deciding what parameters procedures attached to the hooks should have, remember that those procedures will be called when the program counter or call stack frames change.

Although the transparent persistence mechanism could be hardcoded, that would preclude implementing as much as practical in the programming language itself and implementing other useful tools.
