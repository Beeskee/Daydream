Goals:

* good for automating Windows and Windows programs

  It should be good for automating installation, upgrading, uninstallation, and reconfiguration of software.  These are among the worst problems for Windows system administrators.

  It should be able to run arbitrary code when a button or button combination is pressed, globally or only when a certain window is active.  Infrequently used key combinations can be used to launch programs.  It is useful for adding some automation while using a particular program.  For example, quickly filling in fields in a badly-designed database interface.  It is useful for video games which did not bother to provide rapid fire.

  It should be good for remapping buttons, globally or only when a certain window is active.  This is useful for temporarily changing the keyboard layout.  For example, a computer technician who has switched to the Dvorak keyboard layout to treat their repetitive strain injury could use it while repairing the computer of someone that uses the QWERTY keyboard layout.  It is useful for programs that did not bother to provide proper button remapping.  3-D modelers and video games frequently do not provide button remapping, and may have a very awkward default mapping, especially if you use an alternative keyboard layout.

* good error handling

  Good error handling makes writing safe code and debugging easier.

  Where possible, the programming language should make errors impossible, without reducing what can be expressed in it.

  Detecting errors should require no effort.

  The damage errors can cause should be minimized.

  If the program does not handle an error, the programming language implementation should immediately halt execution, display what expectation was violated, where the error occurred, and the relevant values.

  Errors should be classified such that errors due to defects are separate from input/output errors.  Only input/output errors should normally be handled.  This prevents defects from being hidden by accident.

  It should be possible, though normally discouraged, to handle all errors.  This makes writing interpreters possible.

  Mechanism should be separated from policy.  Code that can experience errors should provide one or more ways to recover from those errors (mechanisms).  Code that calls code that can experience errors should be what chooses the way to handle an error (the policy).  This eliminates the need to hard-code the policy, a high-level concern, in low-level code, while allowing mechanisms to make use of state that is only present near the point where an error occurs.

* avoid surprising behavior

  Surprising behavior is the mother of all defects.

* consistent

  Consistency means not having to learn, remember, and abstract over, differences that should not exist.

  Constructs should always compose with any construct that can satisfy its requirements.

  Related constructs should have similar names.

  Related functions and macros should have similar parameters, and parameter order.

* avoid conflation

  Conflation means having to learn, remember, and abstract over, similarities that should not exist.  For example, many vector (array) operations only have useful semantics when sequential integer indexes are assumed, and therefore vectors and dictionaries should not be the same type.

  Constructs should never compose with any construct that cannot satisfy its requirements.

  Unrelated constructs should have different names.

* elegant

  Elegance usually results in less code to write, test, document, and maintain.

  * simple

    The number of primitive constructs should be minimized.

  * general

    Most constructs should be useful for many different purposes.

  * composable

    It should be possible to combine most constructs to produce new, useful, constructs.  The number of non-composable constructs should be minimized.

  * brief

    The amount of code should be minimized.  This refers to the number of tokens, not the token length.

  * relevant

    The majority of the code should relate to solving the problem.  The amount of code for input/output and resource management should be minimized.

  * seek symmetry

    Where practical, inverse functions should be provided.  Other forms of symmetry may also be of practical value.

* avoid unnecessary restrictions

  If the programming language is too restrictive, it will be unpleasant to work in.

  As much as practical should be implemented in the programming language itself.  If it is too restrictive, this will reveal it.

  It should be possible to implement a metacircular evaluator in the programming language, with a small amount of code, without much loss in efficiency.  This assures the programming language's implementation is exposed in a useful way to programs written in it.


Non-Goals:

* familiarity or ease of learning by novice programmers

  The syntax used in Lisp-like languages is not familiar to the average person.  Writing Lisp source code is difficult without an editor that helps with matching parentheses, and non-Lisp-programmers are unlikely to be familiar with one.  Many concepts, like closures, are also unfamiliar.  This makes Lisp-like languages more difficult to learn than most popular programming languages, because there is more to learn.

  The same features that make Lisp-like languages difficult to learn are what makes them superior to popular programming languages.  The syntax makes macros practical.  It makes macro calls look and act like built-in constructs without a lot of effort on the part of the macro author.  If macro authors had to avoid conflicting with syntax reserved for built-in constructs, and define custom mixfix syntax for their macros, few would bother.  Fully parenthesized syntax prevents defects due to forgetting operator precedence and associativity.  The unfamiliar concepts make it easier to build abstractions that are difficult to express in other programming languages.  For example, object-oriented programming support is usually built into popular programming languages, but is usually derived from mutable closures in Lisp-like languages.

  When a designer must choose whether to favor novices or experts, favoring experts is almost always the correct decision.  You are only a novice once, and spend more time as an expert than a novice.

  However, I do not intend to go out of my way to make it difficult to learn for novice programmers.

* compatibility with any existing Lisp-like languages

  Being compatible with an existing Lisp-like language means accepting all of their design decisions.  I am unaware of any Lisp-like languages where I agree with all of their design decisions.

  I am unaware of any Lisp-like languages that are intended for automating other programs.  It would not be surprising if one that was made different design decisions.

  If I am going to go to the trouble of writing my own Lisp-like language implementation, I am going to try to improve upon existing designs as much as possible in the process.

* syntactic innovation

  I hope to take all my syntax from existing Lisp-like languages.  I want to keep the amount of punctuation very low.  I /like/ the simple, regular, appearance of Lisp source code.

  I might use "%" for modulo, as in popular programming languages, even though I cannot find a Lisp-like language that does that.

  I might use some original names for things if I cannot find something acceptable.  I want frequently used constructs to have very short, but meaningful, names, so expressions remain readable.

* parentheses reduction

  Parentheses shaming (e.g. "Lisp stands for Lots of Irritating Superfluous Parentheses") has inspired the authors of several Lisp-like languages (e.g. Arc and Clojure) to remove parentheses anywhere they could be inferred (e.g. around "cond" clauses, because test and result expressions always appear in pairs).

  This reduces the utility of structure editors and pretty printers, since parentheses inference is not possible in the general case (e.g. in macro invocations).

  It makes code difficult to understand, because the reader has to infer the parentheses to understand the grouping.

  Lisp programmers should not mutilate their programming language in an attempt to please programmers that reject Lisp syntax.  They will not like it any more with less parentheses.  They will only be satisfied when it looks like C.

* dictionary and vector literals

  Not having dictionary and vector literals prevents questions about whether their elements should be evaluated or not, and defects caused by incorrectly assuming they are or are not.

  It is necessary to use 'constructor syntax' (e.g. "(list x y z)") for lists to prevent ambiguity in pattern matching.  Otherwise it is impossible to tell the difference between a pattern construct and trying to bind a variable with the same name as a pattern construct.

  While the ambiguity problem is limited to lists, using a different syntax in pattern matching for everything but lists is not consistent.

  Having two syntaxes for the same thing is not simple.

* reader macros

  I have no strong objection to reader macros, they just do not seem helpful to me.  Their scope is unlimited, making them hard to use safely.  Without the ability to create new types and new "print"ed representations there is little motivation for new literal syntax.

* generalized variables

  While I can see the appeal of having a single "set!" special form that can accept any mutable place (variables, those referred to by a dictionary and key, a list's "first" and "rest", or a vector and index), I cannot imagine how to implement this in AutoHotkey.  AutoHotkey's "byref" only works with some variables, not Objects.  Pointer hacks are likely to break when AutoHotkey's implementation changes.

  I can still provide special forms that mutate each of those kinds of places, but the programmer will have to use the right one.

  If it was possible to correct this, it would still reduce the efficiency of the garbage collector, since it currently does not have to set every reference in a collection to null when freeing it to cope with AutoHotkey's reference counting.  If you could refer to locations inside collections, instead of just to the collection, this would not work.

  The absence of this feature should not be very annoying if you are doing mostly-functional programming.

* symbol macros

  Symbol macros are only useful for generalized variables, which is a feature I do not plan to support.  Since they have no parameters, they cannot perform any useful processing.

* mandatory static type checking

  Programmers often worry too much about whether their programming language is dynamically or statically type checked, and do not worry enough about whether their code is very dynamic or static.  The more general code is, the more dynamic it must be, because it must handle more possibilities at run time.  The more safe and efficient code is, the more static it must be, because it must prevent more possibilities at run time.  Since generality, safety, and efficiency are all desirable properties, the question should be which is more important for your code's intended use, not which is always superior.  It is easier to write dynamic code with dynamic type checking, and static code with static type checking, but either kind of code can be written with either kind of type checking.

  A mandatory static type system causes several problems.

  Programmers define an excess of types, and a small number of functions to work with each type, because using a separate type for each purpose minimizes the chance of operating on an invalid value.  It also minimizes code reuse.

  Type annotations make code more verbose.  Theoretically type inference, combined with a programming language design that assures type inference is always possible, can eliminate the need for type annotations.  In practice, even in programming languages with type inference, most variables and functions in the outermost scope must have type annotations, because most will be exported and code in other modules would break if their type changed.

  Making changes requires more effort, because you must change the type annotations everywhere a value is used when you want to change its type.

  Generic static type systems often have poor payoff per effort ratios for improving safety and efficiency.

  Simple static type systems are not sufficient to prove code correct.  Dependent type systems are sufficient, but require heavy annotation.  It is often easier to write a program to derive correct efficient code from your specification than to annotate correct hand-written code enough to satisfy a dependent type system.

  A static type system is not necessary nor sufficient to eliminate run time type checks.  Most variables in code written in dynamically type checked languages are used with a single type of value, and compilers can use type inference to eliminate most run time type checks.  Lisp compilers have been doing that for decades.  When sum types (a.k.a. tagged unions) are used in statically type checked languages, run time type checks (reading the tag) determine what code to run.

  What features should be included in a static type system?  Most are primarily or exclusively concerned with type specifiers; what type a value is.  I rarely make mistakes involving operating on the wrong type of value, and when I do it is almost always easy to detect and correct.  Making mistakes with units of measure is an exception.  I consider unit and dimensional analysis, especially with safe type coercion, very helpful.  I would prefer a static type system to be more concerned with type qualifiers; what qualities a value has.  For example, inferring and checking the immutability of variables and values, taint and trademark checking, and typestate checking.  Mistakes involving those are almost always hard to detect and correct.  Forcing side effects to be clustered near execution entry points, by preventing referentially transparent procedures from calling non-referentially transparent procedures (which would make them not referentially transparent), results in designs where most procedures compose, and the code is easier to maintain and optimize.  Something like checked exceptions, but for a condition system, is probably the right way to assure input/output conditions are handled.  Whatever you decide, if you include a mandatory static type system, everyone that uses your programming language is forced to learn and use it, even if it does not help solve their problems.  Trying to solve everyone's problems in a mandatory static type system results in increasing complexity.

  For all these reasons, and more, a dynamically type checked language with a Lisp macro system is "the right thing".  Macros can describe any static type system you want, if you want one.  Static type checking becomes optional and pluggable.  Functions written with different type systems can call each other effortlessly.

* introduce a null type

  Do not confuse this with Scheme's terminology for the empty list.  The empty list will still exist in my programming language, and will be called "null".

  The absence of an equivalent to the null type in most Lisp-like languages results in abusing other types or values as sentinel values.  The empty list is the most common choice, but false is usually chosen when an empty list could be confused with a meaningful value.  This feels like a kludge, but it is the cleanest solution.

  If lists are described in terms of null references, the length of "'(null)" becomes ambiguous, because it is equivalent to "'()".  List operations lose useful semantics.  Converting vectors with trailing nulls to lists will result in lists that have less elements than the corresponding vector.  "cons"ing a value to a list does not necessarily result in a longer list, since that value might have been null.

  This does raise the question of what the "first" and "rest" of the empty list is.  In my programming language they are defects, as in Scheme and most Lisp-like languages other than Common Lisp (where they are the empty list).  This is consistent with trying to access a vector out of bounds.  The "rest" of a 1 element list is the empty list, and "null?" can be used to test for that.

* implement Scheme's numerical tower

  This would be nice, but it is a lot of work.

  While system administration may involve complex data structures (it certainly involves a lot of parsing), it rarely involves complex numerical math.

  I may support it eventually.

* mandatory referential transparency

  A programming language that enforces global referential transparency can:
  * Lie.  For example, claim to only generate a sequence of actions, and that the runtime performs the side effects the actions instruct it to.  If you believe that, then C also enforces global referential transparency in exactly the same way.  The actions are system calls.  The runtime is the operating system kernel and drivers.  It just has very convenient syntax for the IO and state monads.
  * Be limited to behaving like a fancy calculator, where all variables and data structures are immutable, and no input/output is possible.  Code written in a more capable programming language could display the return values of the non-interactive programs.

  Since I want this programming language to be as useful as possible, I want it to be able to describe most input/output operations.

* mandatory immutability

  Functions that mutate their local variables, but not their arguments or free variables, are as composable and maintainable as those written in programming languages with mandatory immutability, and are sometimes shorter, easier to understand, and more efficient.

  At least one free variable /must/ be mutated to share state between event handlers.

* object-oriented programming

  I believe object-oriented programming usually does more harm than good.  The difficulty in maintaining code that uses mutable global variables is widely recognized.  When a global variable becomes corrupt, it is hard to tell what code was responsible.  Mutable objects are mutable global variables.  Implementation inheritance is also, recently, widely recognized as a source of maintainability problems.  Changing a method's implementation can break anything that inherits it.  Of course you can use immutable objects, and only inherit interfaces and use composition, but then objects are no more useful than records or dictionaries.

  I intend to provide mutable closures, and it should be possible to implement a CLOS-like system using them, which is more powerful than popular programming languages' object-oriented programming support, but I do not plan to write that myself.

  That does imply that the programming language will have a fixed set of types.  It is better to have a small number of types and a large number of procedures that operate on each, than to have a large number of types and a small number of procedures that operate on each, because more code can be reused.  Dictionaries will be used in place of new types.

* transparent (as in Smalltalk) or non-transparent (as in Lisp Machine Lisp) persistence

  Transparent persistence is a marvelous feature, so long as you do not try to use it to replace the file system (as Smalltalk did).  Hardware and software are likely to fail eventually, and if that occurs it is important to be able to recover programs and data, which is almost impossible if they are only stored in a, likely corrupted, core dump.

  Unfortunately, it is very difficult to implement, and very inefficient, if you do not implement your own allocator.  Running on top of AutoHotkey makes that impossible.

* implicit control flow

  Declarative programming is said to be specifying what to do, not how to do it.  In practice you always have to specify how to do it, because there are too many possibilities, and most are too inefficient or would have negative side effects.

  Most programming languages considered to be declarative have implicit control flow, which allows you to avoid specifying how to do control flow, so long as the implicit control flow is what you need.

  Some people consider functional programming languages with strict evaluation to be declarative, but they require specifying how to do everything like imperative programming languages.  Programming languages with lazy- or speculative evaluation, or goal-directed evaluation (like Icon), are more deserving of the title, but still require specifying how to do most control flow.  Good examples include constraint, pull- and push dataflow, deductive-, inductive-, and abductive logic, and string-, term-, and graph rewriting programming languages.

  Which implicit control flow algorithm should be included?  Each one is useful in some situations.  Whatever you decide, if you include an implicit control flow algorithm, everyone that uses your programming language is forced to learn and use it, even if it does not help solve their problems.

  When the implicit control flow is /not/ what you need, you spend a lot of effort working around it.

  Other than push dataflow, implicit control flow is unsafe to use with code that has side effects.  It becomes difficult to determine if or when each side effect will occur.

  Implicit control flow makes it difficult to predict the time and space efficiency of code.  Optimizing compilers for programming languages with implicit control flow spend a lot of effort working around it.

  For all these reasons, and more, a strictly evaluated language with a Lisp macro system is "the right thing".  Macros can describe any implicit control flow algorithm you want, if you want one.  Implicit control flow becomes optional and pluggable.  Functions written with different implicit control flow algorithms can call each other effortlessly.

* pattern guards and views

  Do not confuse this with "when" guards, like those in OCaml, which are supported.

  Pattern guards, like those in Haskell, are qualifiers (expressions) that any in-scope values can be passed to before pattern matching.  If the pattern match on the value of the qualifier succeeds, then its bindings can be used by qualifiers that follow, else qualifiers and patterns that follow are skipped, and pattern matching proceeds with the next equation (sequence of qualifiers and patterns).

  Views, like those in Haskell, are similar, but less powerful.  They are equivalent to a qualifier preprocessing a single value before pattern matching.

  Pattern guards and views encourage bad code.  If you could use them, it probably indicates that your data structure or function decomposition needs to change.  If you usually need to preprocess values from a data structure in the same way, the data structure is the problem.  The data structure should be changed to match the parameters of the functions that process the data.  If you usually need to preprocess values from a data structure in different ways, the function decomposition is the problem.  The preprocessing code should be moved into separate functions, and the return values of those functions should be used as the arguments of the functions that process the data.

  The only advantage pattern guards have (views have none) over fixing the code is short-circuit evaluation.  That is an optimization for a situation that is too rare to justify its inclusion in a programming language.

* comprehensions

  Comprehensions are inspired by set-builder notation from mathematics.

  Comprehensions conflate "filter" and "map".

  To avoid the construction and traversal of intermediate data structures, use streams.

* transducers

  Transducers are transformations from one reducing (folding) function to another.

  Transducers are unnecessarily restrictive, since they are limited to one order of traversal (usually "foldl1").  They have surprising behavior in a programming language with partial application, because it is ambiguous whether functions that can return transducers return a transducer or partially applied function when they are passed less than the maximum number of arguments.

  To avoid the construction and traversal of intermediate data structures, use streams.

* parallelism

  AutoHotkey does not support multithreading, making this difficult to implement.

  To this day most C and C++ code is not thread-safe, so many programming languages with easy integration with C and C++ do not support it.  AutoHotkey may never do so.

  There are hacks abusing inter-process communication for this purpose in the forums, similar to Python's multiprocessing and concurrent.futures implementations.  I may eventually add support for thread pools and futures that way.

* networking

  AutoHotkey does not support networking, making this difficult to implement.

  There are some libraries that use DLL calls for this purpose in the forums.  I may eventually add support for networking that way.

* high security

  There is not much point in having sandboxing, taint or trademark checking, or similar security features when the programming language does not support networking.

  I think sandboxing would be practical to implement.  Built-in definitions for calling foreign functions and manipulating the interpreter would not be imported into the namespace used by untrusted code, and imports would be restricted to a fixed set.  It would still be trivial to crash the interpreter by exhausting memory, but the same can be said of most sandbox implementations.  It would be sufficient to keep untrusted code from performing harmful input/output operations.

  I will consider implementing sandboxing after networking is implemented.

  I do not expect security features to be relevant to most uses of this programming language.  It is not intended for writing web apps.

* high efficiency

  Running on top of AutoHotkey makes high efficiency impossible.  It was never designed with efficiency in mind.  It uses string interpolation of code, which is roughly equivalent to parsing and evaluating lines repeatedly.  It uses reference counting, which we cannot avoid even on objects that have to be traced to be garbage collected (e.g. environments).  It makes no attempt at optimization.  Code written on one line, using commas to separate statements, is up to 35% faster than properly formatted code, for some unfathomable reason.

  So long as the implementation is not too wasteful it should still be usable.

  While I do not plan to write an optimizing compiler for my programming language, I have attempted to avoid design decisions that would make that harder.


Unconventional Features:

My programming language is designed to be easy to embed in another programming language, make it easy to call foreign functions, and to be used for event handling.

Lisp parachronisms have been replaced or removed, since we use IBM PC compatibles instead of IBM 704s, and monitors instead of teleprinters.  "car" is replaced with "first", "cdr" is replaced with "rest", and "car" and "cdr" compositions (like "caddar") have been removed.  You "show" things on the monitor, not "print" them.  For example, you wrestle with your code in the RESL, not the REPL.

The same name in the same scope always refers to the same value, barring mutation.  That prevents surprising behavior.  This implies that variables and functions are not in separate namespaces, which is not unconventional now, but Common Lisp does not work that way.  It implies that the programming language is case-insensitive, which is unconventional now.  To prevent the use of symbols that jangle like bad typography, uppercase letters in symbols are a defect.

A symbol always looks like a symbol.  That prevents surprising behavior.  Any characters that have special meaning to the reader, such as whitespace or parentheses, cannot be included in a symbol.

Definition is much simpler than in most Lisp-like languages.  There is only one "def" form, which can be used in any scope.  There are no "let" forms.  When you want a new scope, use "fn" or "macro".  When you want a local macro definition for use in the outermost scope (like "macrolet" in Common Lisp), instead define an auxiliary macro in the outermost scope and do not export it.  The module system is necessary to support good function decomposition, and there is no reason not to use it to support good macro decomposition.  The complexity of definition in most Lisp-like languages is neither necessary nor helpful.

The syntax for Booleans ("true" and "false") and integers in bases other than 10 ("0b101" and "0xF00") is similar to popular programming languages.

Some aspects of the programming language behave differently when they are used interactively.  This allows both good exploratory programming and good error handling.  At the RESL "def" and "set!" are equivalent, because not being able to redefine an erroneous definition while doing exploratory programming would be a problem, but redefining something, or mutating a variable that has not been defined, is a defect in code loaded from a file.  In a file, redefining something indicates you did not know it was already in use.  In a file, mutating a variable that has not been defined indicates you typoed the name.  Mutating an imported variable is allowed at the RESL, but forbidden in files, because it should never be necessary to violate encapsulation in correct code.

Docstrings can be associated with modules, and variables, macros, and functions in the outermost scope.  Functions are provided for searching for combinations of patterns in module paths and names, patterns in variable names, patterns in docstrings, types, and values.  While this was common in the past, modern Lisp-like languages seem to be becoming more static, and less useful interactively, thus losing one of the main advantages over other programming languages.  Functions are provided to load all source code in a directory, or in a directory hierarchy, to make searching easier.

There are some definitions that are imported into every namespace by default.  Without forms to perform arithmetic, logic, manipulate the built-in data structures, and call foreign functions it would be impossible to define much else.  While redefining something in a file is normally forbidden, most built-in forms can be redefined in a file with only a warning.  This allows new built-in forms to be defined without breaking existing source code.

Types are rarely converted implicitly, and never when it could be surprising.  This is typical of Lisp-like languages, but surprising type coercion is the norm for most programming languages.

Only "true" and "false" are true and false.  Integers can be converted to (0 is false, anything else is true) and from (true is 1, false is 0) Booleans, explicitly.  This should make debugging easier, and I have always found treating non-Boolean values as Boolean surprising.

Data structures can be called with an argument to access elements.  Like 'normal' functions they map their domain to their range.  Dictionaries map keys to values.  Lists map the symbols "first" and "rest" to values.  Strings map 0-based integer indexes to single-character strings.  Vectors map 0-based integer indexes to values.  This is more consistent and brief than most Lisp-like programming languages.

Improper lists are not supported.  The second argument to "cons" must be a list.  Improper lists seem to be inferior to proper lists or vectors for all purposes, and the infix syntax they use is unlike everything else in Lisp.

There is no character type.  Strings are effectively immutable vectors of strings of 1 character.  Strings can be indexed like a vector.  Strings of 1 character can be converted to and from integers.  This may result in more code reuse.

Vectors are dynamic arrays.  Values can be 'pushed' to, or 'popped' from, the highest index, allowing them to double as stacks.  Singly-linked lists support efficient pushing to, and popping from, the beginning, but not efficient indexing.  This makes vectors more versatile, and since bounds are still checked, they are just as safe.  Like singly-linked lists, dynamic arrays are used in most hash table implementations, which are used in most environment implementations, so it makes sense to expose them in the programming language.  It takes little effort and is consistent with the goal of not unnecessarily restricting those programming in the language.

The built-in forms are as general as possible.  For example, there is only one "map" for all sequence collection types (list, string, and vector).  To avoid surprising type coercion, the collection returned is of the same type as the collection argument.  This should allow more code reuse, and minimize what programmers must learn and remember to use the programming language.  "set!" is not generalized for reasons already explained (in Non-Goals: generalized variables).

Equality is much simpler than in most Lisp-like languages.  Most equality tests are performed with "=", which compares values for immutable types, and identities (i.e. addresses) for mutable types, like "==" in most popular programming languages.  Dictionaries always use this form of equality, because it is the only way to assure keys remain associated with their values.  "equal?" is also provided, which compares values even for mutable data structures, and correctly handles reference cycles.  Pattern matching always uses this form of equality, because it handles immutable types and mutable data structures consistently.  The behavior of "=" is almost always what is desired, and "equal?" covers when it is not.  The complexity of equality in most Lisp-like languages is neither necessary nor helpful.

"do" evaluates a sequence of forms in order and returns the value of the last expression.  An empty "do" is a defect, because the value is uninitialized.  Control flow sequences are implicit in most places where you might want to use them, except for "if".

One-armed "if" is a defect, because the value is uninitialized when the test expression is false.  Equivalents which return "null" when the test expression is false, "when" and "unless", are supported for side effects.  Programmers are often wrong when they believe nothing needs to be done when the test expression is false.  "when" and "unless" act as warning signs of potential defects.

Non-exhaustive "cond" clauses is a defect, because the value is uninitialized when all test expressions are false.  This implies an empty "cond" is a defect.

Pattern matching is used for destructuring.  The features supported are very similar to OCaml.  The syntax is very similar to Racket.

Some aspects of OCaml's, Racket's, and this programming language's pattern matching are the same, but should still be mentioned.

Non-exhaustive patterns is a defect, because the value is uninitialized when no patterns match.

Not binding the same variables in every pattern in an "or" pattern construct is a defect, because the values of the variables are uninitialized when a pattern matches that does not bind them.

Pattern constructs can be nested.  While recursive functions could be used instead, the inability to describe patterns more than one level deep would prevent a common usage of pattern matching from working; pattern matching function arguments.  You could put the arguments into a data structure to pattern match, but then you could not destructure their contents.  You could pattern match the arguments individually, but then you could not easily dispatch to the appropriate code for the combination of pattern matches.

Some aspects of this programming language's pattern matching differs from OCaml's, Racket's, or both, and should be mentioned.

Racket's non-linear pattern matching is supported.  If an identifier is used multiple times within a pattern, the corresponding matches must be the same according to "equal?", except that instances of an identifier in different "or" sub-patterns are independent.

The Haskell pattern matching extension record puns is supported for dictionaries.  It uses syntax like "(dict ("x"))" to bind variables with the same name as string or symbol keys for the mentioned keys.  Using string keys that do not contain valid symbol names with this feature is a defect.

The Haskell pattern matching extension record wildcards is supported for dictionaries.  It uses syntax like "(dict (_))" to bind variables with the same name as string or symbol keys for all keys in the dictionary that do not correspond to a variable already bound in the pattern.  Using any type of key other than strings or symbols, or string keys that do not contain valid symbol names, with this feature is a defect.

Normal dictionary pattern matching, dictionary puns, and dictionary wildcards can be combined in the same pattern.  For example, if you matched the dictionary "(dict ('a 1) ('b 2) ('c 3))" with the pattern "(dict ('a x) ('b) (_))" the bindings would be "x" which refers to 1, "b" which refers to 2, and "c" which refers to 3.  The dictionary wildcard must appear last when it is used in combination with other patterns in the same dictionary.

Racket's "cons" pattern construct refers to mutable cons cells in this programming language.  This programming language only has mutable cons cells.

Racket's "and" pattern construct is supported.  It is more general than the "as" pattern construct in other programming languages.  It is handy for binding "or" and "interval" pattern matches, in addition to destructuring and equality testing.

OCaml's interval pattern construct is supported, and named "interval".  It has two parameters, the first for the low bound, the second for the high bound.  It is more convenient than specifying each element of a closed interval of numbers or single-character strings in an "or" pattern construct.

"when" guards use Lisp prefix syntax, since this programming language does not support keyword parameters.  They cannot appear inside a pattern, because all variables must be bound before a "when" guard can be evaluated.

Only lexical scope is supported.  Dynamic scope prevents composition and makes understanding code more difficult.  Closures and partial application are a composable, understandable, alternative to dynamic scope for avoiding repeatedly specifying an argument.

While (trailing) optional and rest parameters are supported, they are rarely used.  Keyword parameters are not supported.  They interact in surprising ways with optional and rest parameters.  Data structures like dictionaries, lists, and vectors are used where keyword, optional, and rest parameters would be used in other Lisp-like languages.

Without optional parameters a second "def" form would have to be provided, or a sentinel value used, to cope with some variables not having docstrings.

Without rest parameters defining forms that use control flow sequences (e.g. function bodies) would require wrapping the control flow sequence in an extra pair of parentheses, which would be inconsistent with built-in forms that use control flow sequences.

Function arguments are evaluated once, from left to right, as in Common Lisp.  It is bad style to depend on that, but it seems better to standardize it than to have it be implementation-defined as it is in so many programming languages.  Optimizing compilers are free to evaluate arguments without side effects however they please, so long as the results are correct.

Partial application is supported.  If you call a fixed-arity function with less than the number of arguments it expects, it will return a closure that will accept the remaining arguments and has the closed-over arguments in its environment.  Parameters should appear in order from the most to least likely to be reused.  This makes using closures much more convenient.  Calling a fixed-arity function with the expected number of arguments causes it to run normally.  Calling a function with too many arguments is a defect.

"fix-arity" creates a fixed-arity copy of a variadic form to make it easier to build closures with.

If you want to leave out values in the middle of a function's arguments, instead of only at the end, you can use "_" in their place.  The resulting closure will expect the remaining arguments in the same order.  To prevent surprising behavior, "_" (along with other reserved words) is not a valid variable name.

Function parameters can be rearranged to ease closure creation like so "(fn (x y) (bad-fn y x))".  I have yet to come up with anything shorter.

Delimited continuations and dynamic-wind are supported.  Undelimited continuations are not.  Delimited continuations compose.  Undelimited continuations do not.

Everything returns a value.  Forms that perform definition or mutation return the value that they used.  Forms that involve a control flow sequence return the value returned by the last expression in the control flow sequence.  This, along with combining allocation and initialization, prevents uninitialized values.

Multiple return values are not supported.  Programming languages that allow them must provide constructs to bind them, which are less general than destructuring constructs.  Evaluation should reduce a tree of expressions to a single value.  Pattern matching makes binding multiple values inside a data structure trivial.

Recursion is properly supported.  Call stack frames are heap allocated, so non-tail recursion will succeed unless memory is exhausted.  Tail call elimination is performed, so loops can be defined recursively.

The macro system is similar to the one in Common Lisp and most other Lisp-like languages, except with the wrong defaults corrected.  Capturing is explicit, not implicit.  Macros, and code generated by them, use the environment from where the macro was defined (except for their arguments or when capturing), not where it was called.  That is consistent with the behavior of functions.  This is called implicit renaming macros.  It solves the macro hygiene problem while still allowing macros to work with lists of normal values.  Requiring macros to work with syntax objects instead of normal values, like most hygienic macro systems, prevents the use of normal functions in macro expansion, which is one of the main advantages Lisp macro systems have over other code generators, or requires the syntax objects to be converted to normal values, which defeats the purpose of using syntax objects.  The extra information included in syntax objects is preserved in the abstract syntax tree in my implementation, and is used by the condition system for reporting errors and warnings.

There is a condition system that is similar to the one in Common Lisp.  It is used to handle defects, input/output errors, and warnings.  Using it as a general-purpose communication mechanism is discouraged, because invisible paths of communication make maintenance difficult.  A condition system seems to be the only way to satisfy our error handling design goals.

Warnings are issued when code needs maintenance but still works.  For example, it might use a depreciated construct, or a bad practice that was previously tolerated.  Warnings are shown by default, since that is the only responsible way to design a programming language.  History has shown most programmers will not exert any effort to find problems in their code.  Condition handlers can choose other ways to handle warnings, such as logging or discarding them.

I have attempted to keep the module system as simple as possible while still enforcing good modularity.  There is a one-to-one relationship between files and modules.  A module is similar to a lexical environment.  They can be linked to look up the value of an imported variable in the outermost scope of another module.  You can associate the value of an imported variable with a different name in the module it is imported into.  Mutating across module boundaries is forbidden outside interactive use.  Modules must explicitly state what variables they export, and other modules can only import those variables.  Cyclical dependencies are not supported.  Everything defined within a module, or imported into it, is accessible at both macro expansion and run time.  All state, except for the abstract syntax tree, is discarded after each module is macro expanded.  The abstract syntax tree is re-evaluated as needed to create the necessary state for the macro expansion of other modules or run time.  This prevents the state within a module at macro expansion time from influencing the macro expansion of other modules, or from influencing run time.  There is no phase separation or other unnecessary and unhelpful complexity.  This design could support incremental compilation (with the abstract syntax trees corresponding to binaries, and re-evaluation corresponding to (re)loading the binaries), but I chose it due to the lack of surprising behavior.

Modules can be reloaded, both in and out of interactive mode, to update their definitions.  This is useful for exploratory programming, or hot swapping to correct a defect in, or add features to, a running program.  Be aware that this only updates the values of the imported variables.  References to out-of-date values may still exist.  You should therefore prefer to access imported values through the variables you imported them into.

The garbage collector is continuous, generational, and incremental (i.e. marking and sweeping are broken down into multiple steps).  This should result in low, and fairly steady, latency.  While, past a point, a trade-off must be made between low-latency and high-throughput, generational garbage collection improves both.  Favoring low-latency over high-throughput seems like the right decision for interactive programs, like those most likely to be written in this programming language.  It is possible to disable garbage collection, perform increments only when the program is idle, and force non-incremental full garbage collections.  These features are often desired by those writing software intended for use in short bursts or video games.  AutoHotkey scripts are often used in short bursts, and often used with video games.  In all cases a non-incremental full garbage collection will still occur if memory is almost exhausted, because a pause is less disruptive than crashing.  The interface is inspired by Lua's garbage collector.


Inspiration:

Scheme
  Chicken Scheme and Picrin Scheme
  Racket
ML
Caml
Shen
Common Lisp
Emacs Lisp
Python
Lua
Clojure
Hy
